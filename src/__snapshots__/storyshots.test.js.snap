// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Form/Form no attributes 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <Form>
      <Formik
        enableReinitialize={true}
        isInitialValid={false}
        onSubmit={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
      >
        <Form
          tag={[Function]}
        >
          <Form
            className=""
          >
            <Component
              className=""
              formik={
                Object {
                  "dirty": false,
                  "errors": Object {},
                  "handleBlur": [Function],
                  "handleChange": [Function],
                  "handleReset": [Function],
                  "handleSubmit": [Function],
                  "initialValues": Object {},
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": false,
                  "registerField": [Function],
                  "resetForm": [Function],
                  "setError": [Function],
                  "setErrors": [Function],
                  "setFieldError": [Function],
                  "setFieldTouched": [Function],
                  "setFieldValue": [Function],
                  "setFormikState": [Function],
                  "setStatus": [Function],
                  "setSubmitting": [Function],
                  "setTouched": [Function],
                  "setValues": [Function],
                  "submitCount": 0,
                  "submitForm": [Function],
                  "touched": Object {},
                  "unregisterField": [Function],
                  "validate": undefined,
                  "validateField": [Function],
                  "validateForm": [Function],
                  "validateOnBlur": true,
                  "validateOnChange": true,
                  "validationSchema": undefined,
                  "values": Object {},
                }
              }
            >
              <form
                className=""
                onReset={[Function]}
                onSubmit={[Function]}
              />
            </Component>
          </Form>
        </Form>
      </Formik>
    </Form>
  </div>
</div>
`;

exports[`Storyshots Form/Form with error 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <Form
      isInitialValid={false}
      validate={[Function]}
      values={Object {}}
    >
      <Formik
        enableReinitialize={true}
        initialValues={Object {}}
        isInitialValid={false}
        onSubmit={[Function]}
        validate={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
      >
        <Form
          tag={[Function]}
        >
          <Form
            className=""
          >
            <Component
              className=""
              formik={
                Object {
                  "dirty": false,
                  "errors": Object {},
                  "handleBlur": [Function],
                  "handleChange": [Function],
                  "handleReset": [Function],
                  "handleSubmit": [Function],
                  "initialValues": Object {},
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": true,
                  "registerField": [Function],
                  "resetForm": [Function],
                  "setError": [Function],
                  "setErrors": [Function],
                  "setFieldError": [Function],
                  "setFieldTouched": [Function],
                  "setFieldValue": [Function],
                  "setFormikState": [Function],
                  "setStatus": [Function],
                  "setSubmitting": [Function],
                  "setTouched": [Function],
                  "setValues": [Function],
                  "submitCount": 0,
                  "submitForm": [Function],
                  "touched": Object {},
                  "unregisterField": [Function],
                  "validate": [Function],
                  "validateField": [Function],
                  "validateForm": [Function],
                  "validateOnBlur": true,
                  "validateOnChange": true,
                  "validationSchema": undefined,
                  "values": Object {},
                }
              }
            >
              <form
                className=""
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <ForceValidate />
              </form>
            </Component>
          </Form>
        </Form>
      </Formik>
    </Form>
  </div>
</div>
`;

exports[`Storyshots Form/Form with some child 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <Form>
      <Formik
        enableReinitialize={true}
        isInitialValid={false}
        onSubmit={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
      >
        <Form
          tag={[Function]}
        >
          <Form
            className=""
          >
            <Component
              className=""
              formik={
                Object {
                  "dirty": false,
                  "errors": Object {},
                  "handleBlur": [Function],
                  "handleChange": [Function],
                  "handleReset": [Function],
                  "handleSubmit": [Function],
                  "initialValues": Object {},
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": false,
                  "registerField": [Function],
                  "resetForm": [Function],
                  "setError": [Function],
                  "setErrors": [Function],
                  "setFieldError": [Function],
                  "setFieldTouched": [Function],
                  "setFieldValue": [Function],
                  "setFormikState": [Function],
                  "setStatus": [Function],
                  "setSubmitting": [Function],
                  "setTouched": [Function],
                  "setValues": [Function],
                  "submitCount": 0,
                  "submitForm": [Function],
                  "touched": Object {},
                  "unregisterField": [Function],
                  "validate": undefined,
                  "validateField": [Function],
                  "validateForm": [Function],
                  "validateOnBlur": true,
                  "validateOnChange": true,
                  "validationSchema": undefined,
                  "values": Object {},
                }
              }
            >
              <form
                className=""
                onReset={[Function]}
                onSubmit={[Function]}
              >
                Hello
              </form>
            </Component>
          </Form>
        </Form>
      </Formik>
    </Form>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText label and children 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText
      label="Some label"
    >
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            >
              Some label
            </label>
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control"
              >
                I'm a child
              </div>
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText label and pre-formated children 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText
      label="Some label"
      pre={true}
    >
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            >
              Some label
            </label>
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control labeled-pre"
              >
                I'm a child
spread over
a few lines
              </div>
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText label and value 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText
      label="Some label"
      value="Some value"
    >
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            >
              Some label
            </label>
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control"
              >
                Some value
              </div>
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText label, no value 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText
      label="Some label"
    >
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            >
              Some label
            </label>
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control"
              />
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText no props 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText>
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            />
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control"
              />
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/LabeledText value, no label 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <div
    style={
      Object {
        "backgroundColor": "white",
      }
    }
  >
    <LabeledText
      value="some value"
    >
      <FormGroup
        row={true}
        tag="div"
      >
        <div
          className="position-relative row form-group"
        >
          <Label
            lg={2}
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <label
              className="col-12 col-lg-2 col-form-label"
            />
          </Label>
          <Col
            lg={8}
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
            xs={12}
          >
            <div
              className="col-12 col-lg-8"
            >
              <div
                className="form-control"
              >
                some value
              </div>
            </div>
          </Col>
        </div>
      </FormGroup>
    </LabeledText>
  </div>
</div>
`;

exports[`Storyshots Form/TextField label and name 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                label="Some label"
                name="two"
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      for="two"
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                        htmlFor="two"
                      >
                        Some label
                      </label>
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                          id="two"
                          name="two"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                            id="two"
                            name="two"
                          >
                            <input
                              className="form-control"
                              id="two"
                              name="two"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value={2}
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField label and pre-formated value in multi-row field 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                label="Some label"
                name="multi"
                rows={5}
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      for="multi"
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                        htmlFor="multi"
                      >
                        Some label
                      </label>
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="textarea"
                          id="multi"
                          name="multi"
                          rows={5}
                        >
                          <FieldInner
                            className="form-control"
                            component="textarea"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                            id="multi"
                            name="multi"
                            rows={5}
                          >
                            <textarea
                              className="form-control"
                              id="multi"
                              name="multi"
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={5}
                              value="I'm a child
spread over
a few lines"
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField label and value 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                label="Some label"
                value="Some value"
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                      >
                        Some label
                      </label>
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                          value="Some value"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                            value="Some value"
                          >
                            <input
                              className="form-control"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value="Some value"
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField label, name and help 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                help="A little help from my friends"
                label="Some label"
                name="two"
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      for="two"
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                        htmlFor="two"
                      >
                        Some label
                      </label>
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                          id="two"
                          name="two"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                            id="two"
                            name="two"
                          >
                            <input
                              className="form-control"
                              id="two"
                              name="two"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value={2}
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                        <FormText
                          color="muted"
                          tag="small"
                        >
                          <small
                            className="form-text text-muted"
                          >
                            A little help from my friends
                          </small>
                        </FormText>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField label, no name 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                label="Some label"
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                      >
                        Some label
                      </label>
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                          >
                            <input
                              className="form-control"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value={
                                Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                }
                              }
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField name, no label 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField
                name="one"
              >
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      for="one"
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                        htmlFor="one"
                      />
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                          id="one"
                          name="one"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                            id="one"
                            name="one"
                          >
                            <input
                              className="form-control"
                              id="one"
                              name="one"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value={1}
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Form/TextField no props 1`] = `
<div
  style={
    Object {
      "backgroundColor": "#eee",
      "border": "solid thin silver",
      "borderRadius": "0.5em",
      "margin": "1em",
      "padding": "1em",
    }
  }
>
  <Form
    style={
      Object {
        "backgroundColor": "white",
      }
    }
    values={
      Object {
        "multi": "I'm a child
spread over
a few lines",
        "one": 1,
        "two": 2,
      }
    }
  >
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "multi": "I'm a child
spread over
a few lines",
          "one": 1,
          "two": 2,
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      style={
        Object {
          "backgroundColor": "white",
        }
      }
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Form
        tag={[Function]}
      >
        <Form
          className=""
        >
          <Component
            className=""
            formik={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validate": undefined,
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validationSchema": undefined,
                "values": Object {
                  "multi": "I'm a child
spread over
a few lines",
                  "one": 1,
                  "two": 2,
                },
              }
            }
          >
            <form
              className=""
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <TextField>
                <FormGroup
                  row={true}
                  tag="div"
                >
                  <div
                    className="position-relative row form-group"
                  >
                    <Label
                      lg={2}
                      tag="label"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <label
                        className="col-12 col-lg-2 col-form-label"
                      />
                    </Label>
                    <Col
                      lg={8}
                      tag="div"
                      widths={
                        Array [
                          "xs",
                          "sm",
                          "md",
                          "lg",
                          "xl",
                        ]
                      }
                      xs={12}
                    >
                      <div
                        className="col-12 col-lg-8"
                      >
                        <FormikConnect(FieldInner)
                          className="form-control"
                          component="input"
                        >
                          <FieldInner
                            className="form-control"
                            component="input"
                            formik={
                              Object {
                                "dirty": false,
                                "errors": Object {},
                                "handleBlur": [Function],
                                "handleChange": [Function],
                                "handleReset": [Function],
                                "handleSubmit": [Function],
                                "initialValues": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                                "isSubmitting": false,
                                "isValid": false,
                                "isValidating": false,
                                "registerField": [Function],
                                "resetForm": [Function],
                                "setError": [Function],
                                "setErrors": [Function],
                                "setFieldError": [Function],
                                "setFieldTouched": [Function],
                                "setFieldValue": [Function],
                                "setFormikState": [Function],
                                "setStatus": [Function],
                                "setSubmitting": [Function],
                                "setTouched": [Function],
                                "setValues": [Function],
                                "submitCount": 0,
                                "submitForm": [Function],
                                "touched": Object {},
                                "unregisterField": [Function],
                                "validate": undefined,
                                "validateField": [Function],
                                "validateForm": [Function],
                                "validateOnBlur": true,
                                "validateOnChange": true,
                                "validationSchema": undefined,
                                "values": Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                },
                              }
                            }
                          >
                            <input
                              className="form-control"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value={
                                Object {
                                  "multi": "I'm a child
spread over
a few lines",
                                  "one": 1,
                                  "two": 2,
                                }
                              }
                            />
                          </FieldInner>
                        </FormikConnect(FieldInner)>
                        <FormFeedback
                          tag="div"
                        >
                          <div
                            className="invalid-feedback"
                          />
                        </FormFeedback>
                      </div>
                    </Col>
                  </div>
                </FormGroup>
              </TextField>
            </form>
          </Component>
        </Form>
      </Form>
    </Formik>
  </Form>
</div>
`;

exports[`Storyshots Icons/ButtonIconAdd Outlined 1`] = `
<ButtonIconAdd
  onClick={[Function]}
  outline={true}
>
  <Button
    color="primary"
    onClick={[Function]}
    outline={true}
    tag="button"
  >
    <button
      aria-label={null}
      className="btn btn-outline-primary"
      onClick={[Function]}
      type="button"
    >
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 "
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={Object {}}
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
      <span
        className="label"
      >
        Agregar
      </span>
    </button>
  </Button>
</ButtonIconAdd>
`;

exports[`Storyshots Icons/ButtonIconAdd Outlined disabled 1`] = `
<ButtonIconAdd
  disabled={true}
  onClick={[Function]}
  outline={true}
>
  <Button
    color="primary"
    disabled={true}
    onClick={[Function]}
    outline={true}
    tag="button"
  >
    <button
      aria-label={null}
      className="btn btn-outline-primary disabled"
      disabled={true}
      onClick={[Function]}
      type="button"
    >
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 "
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={Object {}}
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
      <span
        className="label"
      >
        Agregar
      </span>
    </button>
  </Button>
</ButtonIconAdd>
`;

exports[`Storyshots Icons/ButtonIconAdd Plain 1`] = `
<ButtonIconAdd
  onClick={[Function]}
>
  <Button
    color="primary"
    onClick={[Function]}
    tag="button"
  >
    <button
      aria-label={null}
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 "
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={Object {}}
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
      <span
        className="label"
      >
        Agregar
      </span>
    </button>
  </Button>
</ButtonIconAdd>
`;

exports[`Storyshots Icons/ButtonIconAdd Plain disabled 1`] = `
<ButtonIconAdd
  disabled={true}
  onClick={[Function]}
>
  <Button
    color="primary"
    disabled={true}
    onClick={[Function]}
    tag="button"
  >
    <button
      aria-label={null}
      className="btn btn-primary disabled"
      disabled={true}
      onClick={[Function]}
      type="button"
    >
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 "
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={Object {}}
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
      <span
        className="label"
      >
        Agregar
      </span>
    </button>
  </Button>
</ButtonIconAdd>
`;

exports[`Storyshots Icons/ButtonIconAdd no Text 1`] = `
<ButtonIconAdd>
  <Button
    color="primary"
    tag="button"
  >
    <button
      aria-label={null}
      className="btn btn-primary"
      onClick={[Function]}
    >
      <FontAwesomeIcon
        border={false}
        className=""
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 "
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={Object {}}
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
      <span
        className="label"
      />
    </button>
  </Button>
</ButtonIconAdd>
`;

exports[`Storyshots Icons/ButtonSet buttons 1`] = `
<ButtonSet>
  <div
    className="buttonSet"
  >
    <ButtonIconAdd
      onClick={[Function]}
    >
      <Button
        color="primary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-primary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="plus-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-plus-circle fa-w-16 "
              data-icon="plus-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Add
          </span>
        </button>
      </Button>
    </ButtonIconAdd>
    <ButtonIconDelete
      onClick={[Function]}
    >
      <Button
        color="danger"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-danger"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="trash-alt"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-trash-alt fa-w-14 "
              data-icon="trash-alt"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 448 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm416 56v324c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V140c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12zm-272 68c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Delete
          </span>
        </button>
      </Button>
    </ButtonIconDelete>
    <ButtonIconEdit
      onClick={[Function]}
    >
      <Button
        color="secondary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-secondary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="edit"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-edit fa-w-18 "
              data-icon="edit"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 576 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Edit
          </span>
        </button>
      </Button>
    </ButtonIconEdit>
    <ButtonIconCalendar
      onClick={[Function]}
    >
      <Button
        color="secondary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-secondary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="calendar-alt"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-calendar-alt fa-w-14 "
              data-icon="calendar-alt"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 448 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Calendar
          </span>
        </button>
      </Button>
    </ButtonIconCalendar>
    <ButtonIconCheck
      onClick={[Function]}
    >
      <Button
        color="success"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-success"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="check-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-check-circle fa-w-16 "
              data-icon="check-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Check
          </span>
        </button>
      </Button>
    </ButtonIconCheck>
    <ButtonIconNotCheck
      onClick={[Function]}
    >
      <Button
        color="warning"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-warning"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="times-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-times-circle fa-w-16 "
              data-icon="times-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            NotCheck
          </span>
        </button>
      </Button>
    </ButtonIconNotCheck>
  </div>
</ButtonSet>
`;

exports[`Storyshots Icons/ButtonSet icons 1`] = `
<div>
  <IconAdd
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="primary"
      icon="plus-circle"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-primary"
        fixedWidth={false}
        flip={null}
        icon="plus-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-plus-circle fa-w-16 icon-primary"
          data-icon="plus-circle"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconAdd>
  <IconDelete
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="danger"
      icon="trash-alt"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-danger"
        fixedWidth={false}
        flip={null}
        icon="trash-alt"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-trash-alt fa-w-14 icon-danger"
          data-icon="trash-alt"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 448 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm416 56v324c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V140c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12zm-272 68c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconDelete>
  <IconEdit
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="secondary"
      icon="edit"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-secondary"
        fixedWidth={false}
        flip={null}
        icon="edit"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-edit fa-w-18 icon-secondary"
          data-icon="edit"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 576 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconEdit>
  <IconCalendar
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="secondary"
      icon="calendar-alt"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-secondary"
        fixedWidth={false}
        flip={null}
        icon="calendar-alt"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-calendar-alt fa-w-14 icon-secondary"
          data-icon="calendar-alt"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 448 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconCalendar>
  <IconCheck
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="success"
      icon="check-circle"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-success"
        fixedWidth={false}
        flip={null}
        icon="check-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-check-circle fa-w-16 icon-success"
          data-icon="check-circle"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconCheck>
  <IconNotCheck
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="danger"
      icon="times-circle"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-danger"
        fixedWidth={false}
        flip={null}
        icon="times-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-times-circle fa-w-16 icon-danger"
          data-icon="times-circle"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconNotCheck>
  <IconWarning
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="warning"
      icon="exclamation-triangle"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-warning"
        fixedWidth={false}
        flip={null}
        icon="exclamation-triangle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-exclamation-triangle fa-w-18 icon-warning"
          data-icon="exclamation-triangle"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 576 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconWarning>
  <IconStop
    style={
      Object {
        "margin": "1em",
      }
    }
  >
    <Icon
      color="danger"
      icon="exclamation-circle"
      style={
        Object {
          "margin": "1em",
        }
      }
    >
      <FontAwesomeIcon
        border={false}
        className="icon-danger"
        fixedWidth={false}
        flip={null}
        icon="exclamation-circle"
        inverse={false}
        listItem={false}
        mask={null}
        pull={null}
        pulse={false}
        rotation={null}
        size={null}
        spin={false}
        style={
          Object {
            "margin": "1em",
          }
        }
        symbol={false}
        title=""
        transform={null}
      >
        <svg
          aria-hidden="true"
          className="svg-inline--fa fa-exclamation-circle fa-w-16 icon-danger"
          data-icon="exclamation-circle"
          data-prefix="fas"
          role="img"
          style={
            Object {
              "margin": "1em",
            }
          }
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
            fill="currentColor"
            style={Object {}}
          />
        </svg>
      </FontAwesomeIcon>
    </Icon>
  </IconStop>
</div>
`;

exports[`Storyshots Icons/ButtonSet small buttons 1`] = `
<ButtonSet
  size="sm"
>
  <div
    className="buttonSet btn-group-sm"
  >
    <ButtonIconAdd
      onClick={[Function]}
    >
      <Button
        color="primary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-primary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="plus-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-plus-circle fa-w-16 "
              data-icon="plus-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Add
          </span>
        </button>
      </Button>
    </ButtonIconAdd>
    <ButtonIconDelete
      onClick={[Function]}
    >
      <Button
        color="danger"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-danger"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="trash-alt"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-trash-alt fa-w-14 "
              data-icon="trash-alt"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 448 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm416 56v324c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V140c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12zm-272 68c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Delete
          </span>
        </button>
      </Button>
    </ButtonIconDelete>
    <ButtonIconEdit
      onClick={[Function]}
    >
      <Button
        color="secondary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-secondary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="edit"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-edit fa-w-18 "
              data-icon="edit"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 576 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Edit
          </span>
        </button>
      </Button>
    </ButtonIconEdit>
    <ButtonIconCalendar
      onClick={[Function]}
    >
      <Button
        color="secondary"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-secondary"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="calendar-alt"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-calendar-alt fa-w-14 "
              data-icon="calendar-alt"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 448 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Calendar
          </span>
        </button>
      </Button>
    </ButtonIconCalendar>
    <ButtonIconCheck
      onClick={[Function]}
    >
      <Button
        color="success"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-success"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="check-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-check-circle fa-w-16 "
              data-icon="check-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            Check
          </span>
        </button>
      </Button>
    </ButtonIconCheck>
    <ButtonIconNotCheck
      onClick={[Function]}
    >
      <Button
        color="warning"
        onClick={[Function]}
        tag="button"
      >
        <button
          aria-label={null}
          className="btn btn-warning"
          onClick={[Function]}
          type="button"
        >
          <FontAwesomeIcon
            border={false}
            className=""
            fixedWidth={false}
            flip={null}
            icon="times-circle"
            inverse={false}
            listItem={false}
            mask={null}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
          >
            <svg
              aria-hidden="true"
              className="svg-inline--fa fa-times-circle fa-w-16 "
              data-icon="times-circle"
              data-prefix="fas"
              role="img"
              style={Object {}}
              viewBox="0 0 512 512"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"
                fill="currentColor"
                style={Object {}}
              />
            </svg>
          </FontAwesomeIcon>
          <span
            className="label"
          >
            NotCheck
          </span>
        </button>
      </Button>
    </ButtonIconNotCheck>
  </div>
</ButtonSet>
`;

exports[`Storyshots Icons/IconAdd Button 1`] = `
<IconAdd
  button={true}
  onClick={[Function]}
>
  <Icon
    button={true}
    color="primary"
    icon="plus-circle"
    onClick={[Function]}
  >
    <FontAwesomeIcon
      border={false}
      className="active-icon icon-primary"
      fixedWidth={false}
      flip={null}
      icon="plus-circle"
      inverse={false}
      listItem={false}
      mask={null}
      onClick={[Function]}
      pull={null}
      pulse={false}
      rotation={null}
      size={null}
      spin={false}
      symbol={false}
      title=""
      transform={null}
    >
      <svg
        aria-hidden="true"
        className="svg-inline--fa fa-plus-circle fa-w-16 active-icon icon-primary"
        data-icon="plus-circle"
        data-prefix="fas"
        onClick={[Function]}
        role="img"
        style={Object {}}
        viewBox="0 0 512 512"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
          fill="currentColor"
          style={Object {}}
        />
      </svg>
    </FontAwesomeIcon>
  </Icon>
</IconAdd>
`;

exports[`Storyshots Icons/IconAdd Button disabled 1`] = `
<IconAdd
  button={true}
  disabled={true}
  onClick={[Function]}
>
  <Icon
    button={true}
    color="primary"
    disabled={true}
    icon="plus-circle"
    onClick={[Function]}
  >
    <FontAwesomeIcon
      border={false}
      className="icon-primary disabled"
      fixedWidth={false}
      flip={null}
      icon="plus-circle"
      inverse={false}
      listItem={false}
      mask={null}
      pull={null}
      pulse={false}
      rotation={null}
      size={null}
      spin={false}
      symbol={false}
      title=""
      transform={null}
    >
      <svg
        aria-hidden="true"
        className="svg-inline--fa fa-plus-circle fa-w-16 icon-primary disabled"
        data-icon="plus-circle"
        data-prefix="fas"
        role="img"
        style={Object {}}
        viewBox="0 0 512 512"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
          fill="currentColor"
          style={Object {}}
        />
      </svg>
    </FontAwesomeIcon>
  </Icon>
</IconAdd>
`;

exports[`Storyshots Icons/IconAdd Plain 1`] = `
<IconAdd
  onClick={[Function]}
>
  <Icon
    color="primary"
    icon="plus-circle"
    onClick={[Function]}
  >
    <FontAwesomeIcon
      border={false}
      className="icon-primary"
      fixedWidth={false}
      flip={null}
      icon="plus-circle"
      inverse={false}
      listItem={false}
      mask={null}
      onClick={[Function]}
      pull={null}
      pulse={false}
      rotation={null}
      size={null}
      spin={false}
      symbol={false}
      title=""
      transform={null}
    >
      <svg
        aria-hidden="true"
        className="svg-inline--fa fa-plus-circle fa-w-16 icon-primary"
        data-icon="plus-circle"
        data-prefix="fas"
        onClick={[Function]}
        role="img"
        style={Object {}}
        viewBox="0 0 512 512"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
          fill="currentColor"
          style={Object {}}
        />
      </svg>
    </FontAwesomeIcon>
  </Icon>
</IconAdd>
`;

exports[`Storyshots Loading With Title 1`] = `
<Loading
  fade={false}
  title="With Title"
>
  <Modal
    autoFocus={true}
    backdrop={true}
    backdropTransition={
      Object {
        "mountOnEnter": true,
        "timeout": 150,
      }
    }
    centered={false}
    fade={false}
    isOpen={true}
    keyboard={true}
    modalTransition={
      Object {
        "timeout": 300,
      }
    }
    onClosed={[Function]}
    onOpened={[Function]}
    role="dialog"
    zIndex={1050}
  >
    <Portal
      node={
        <div
          style="position: relative; z-index: 1050;"
          tabindex="-1"
        >
          <div
            class=""
          >
            <div
              class="modal"
              role="dialog"
              style="display: block;"
              tabindex="-1"
            >
              <div
                class="modal-dialog"
                role="document"
              >
                <div
                  class="modal-content"
                >
                  <div
                    class="header modal-header"
                  >
                    <h5
                      class="modal-title"
                    >
                      With Title
                    </h5>
                  </div>
                  <div
                    class="container modal-body"
                  >
                    <img
                      alt="loading..."
                      class="img"
                      src="loading.gif"
                    />
                  </div>
                </div>
              </div>
            </div>
            <div
              class="modal-backdrop show"
            />
          </div>
        </div>
      }
    >
      <Portal
        containerInfo={
          <div
            style="position: relative; z-index: 1050;"
            tabindex="-1"
          >
            <div
              class=""
            >
              <div
                class="modal"
                role="dialog"
                style="display: block;"
                tabindex="-1"
              >
                <div
                  class="modal-dialog"
                  role="document"
                >
                  <div
                    class="modal-content"
                  >
                    <div
                      class="header modal-header"
                    >
                      <h5
                        class="modal-title"
                      >
                        With Title
                      </h5>
                    </div>
                    <div
                      class="container modal-body"
                    >
                      <img
                        alt="loading..."
                        class="img"
                        src="loading.gif"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                class="modal-backdrop show"
              />
            </div>
          </div>
        }
      >
        <div
          className=""
        >
          <Fade
            appear={true}
            baseClass=""
            baseClassActive="show"
            className="modal"
            enter={true}
            exit={true}
            in={true}
            mountOnEnter={false}
            onClick={[Function]}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            role="dialog"
            style={
              Object {
                "display": "block",
              }
            }
            tabIndex="-1"
            tag="div"
            timeout={0}
            unmountOnExit={false}
          >
            <Transition
              appear={true}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={0}
              unmountOnExit={false}
            >
              <div
                className="modal"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                role="dialog"
                style={
                  Object {
                    "display": "block",
                  }
                }
                tabIndex="-1"
              >
                <div
                  className="modal-dialog"
                  role="document"
                >
                  <div
                    className="modal-content"
                  >
                    <ModalHeader
                      charCode={215}
                      className="header"
                      closeAriaLabel="Close"
                      tag="h5"
                      wrapTag="div"
                    >
                      <div
                        className="header modal-header"
                      >
                        <h5
                          className="modal-title"
                        >
                          With Title
                        </h5>
                      </div>
                    </ModalHeader>
                    <ModalBody
                      className="container"
                      tag="div"
                    >
                      <div
                        className="container modal-body"
                      >
                        <img
                          alt="loading..."
                          className="img"
                          src="loading.gif"
                        />
                      </div>
                    </ModalBody>
                  </div>
                </div>
              </div>
            </Transition>
          </Fade>
          <div
            className="modal-backdrop show"
          />
        </div>
      </Portal>
    </Portal>
  </Modal>
</Loading>
`;

exports[`Storyshots Loading no title 1`] = `
<Loading
  fade={false}
>
  <Modal
    autoFocus={true}
    backdrop={true}
    backdropTransition={
      Object {
        "mountOnEnter": true,
        "timeout": 150,
      }
    }
    centered={false}
    fade={false}
    isOpen={true}
    keyboard={true}
    modalTransition={
      Object {
        "timeout": 300,
      }
    }
    onClosed={[Function]}
    onOpened={[Function]}
    role="dialog"
    zIndex={1050}
  >
    <Portal
      node={
        <div
          style="position: relative; z-index: 1050;"
          tabindex="-1"
        >
          <div
            class=""
          >
            <div
              class="modal"
              role="dialog"
              style="display: block;"
              tabindex="-1"
            >
              <div
                class="modal-dialog"
                role="document"
              >
                <div
                  class="modal-content"
                >
                  <div
                    class="header modal-header"
                  >
                    <h5
                      class="modal-title"
                    />
                  </div>
                  <div
                    class="container modal-body"
                  >
                    <img
                      alt="loading..."
                      class="img"
                      src="loading.gif"
                    />
                  </div>
                </div>
              </div>
            </div>
            <div
              class="modal-backdrop show"
            />
          </div>
        </div>
      }
    >
      <Portal
        containerInfo={
          <div
            style="position: relative; z-index: 1050;"
            tabindex="-1"
          >
            <div
              class=""
            >
              <div
                class="modal"
                role="dialog"
                style="display: block;"
                tabindex="-1"
              >
                <div
                  class="modal-dialog"
                  role="document"
                >
                  <div
                    class="modal-content"
                  >
                    <div
                      class="header modal-header"
                    >
                      <h5
                        class="modal-title"
                      />
                    </div>
                    <div
                      class="container modal-body"
                    >
                      <img
                        alt="loading..."
                        class="img"
                        src="loading.gif"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                class="modal-backdrop show"
              />
            </div>
          </div>
        }
      >
        <div
          className=""
        >
          <Fade
            appear={true}
            baseClass=""
            baseClassActive="show"
            className="modal"
            enter={true}
            exit={true}
            in={true}
            mountOnEnter={false}
            onClick={[Function]}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            role="dialog"
            style={
              Object {
                "display": "block",
              }
            }
            tabIndex="-1"
            tag="div"
            timeout={0}
            unmountOnExit={false}
          >
            <Transition
              appear={true}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={0}
              unmountOnExit={false}
            >
              <div
                className="modal"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                role="dialog"
                style={
                  Object {
                    "display": "block",
                  }
                }
                tabIndex="-1"
              >
                <div
                  className="modal-dialog"
                  role="document"
                >
                  <div
                    className="modal-content"
                  >
                    <ModalHeader
                      charCode={215}
                      className="header"
                      closeAriaLabel="Close"
                      tag="h5"
                      wrapTag="div"
                    >
                      <div
                        className="header modal-header"
                      >
                        <h5
                          className="modal-title"
                        />
                      </div>
                    </ModalHeader>
                    <ModalBody
                      className="container"
                      tag="div"
                    >
                      <div
                        className="container modal-body"
                      >
                        <img
                          alt="loading..."
                          className="img"
                          src="loading.gif"
                        />
                      </div>
                    </ModalBody>
                  </div>
                </div>
              </div>
            </Transition>
          </Fade>
          <div
            className="modal-backdrop show"
          />
        </div>
      </Portal>
    </Portal>
  </Modal>
</Loading>
`;

exports[`Storyshots Loading not open 1`] = `
<Loading
  fade={false}
  isOpen={false}
  title="With Title"
>
  <Modal
    autoFocus={true}
    backdrop={true}
    backdropTransition={
      Object {
        "mountOnEnter": true,
        "timeout": 150,
      }
    }
    centered={false}
    fade={false}
    isOpen={false}
    keyboard={true}
    modalTransition={
      Object {
        "timeout": 300,
      }
    }
    onClosed={[Function]}
    onOpened={[Function]}
    role="dialog"
    zIndex={1050}
  />
</Loading>
`;

exports[`Storyshots Loading title and body 1`] = `
<Loading
  fade={false}
  title="With Title"
>
  <Modal
    autoFocus={true}
    backdrop={true}
    backdropTransition={
      Object {
        "mountOnEnter": true,
        "timeout": 150,
      }
    }
    centered={false}
    fade={false}
    isOpen={true}
    keyboard={true}
    modalTransition={
      Object {
        "timeout": 300,
      }
    }
    onClosed={[Function]}
    onOpened={[Function]}
    role="dialog"
    zIndex={1050}
  >
    <Portal
      node={
        <div
          style="position: relative; z-index: 1050;"
          tabindex="-1"
        >
          <div
            class=""
          >
            <div
              class="modal"
              role="dialog"
              style="display: block;"
              tabindex="-1"
            >
              <div
                class="modal-dialog"
                role="document"
              >
                <div
                  class="modal-content"
                >
                  <div
                    class="header modal-header"
                  >
                    <h5
                      class="modal-title"
                    >
                      With Title
                    </h5>
                  </div>
                  <div
                    class="container modal-body"
                  >
                    Body
                    <img
                      alt="loading..."
                      class="img"
                      src="loading.gif"
                    />
                  </div>
                </div>
              </div>
            </div>
            <div
              class="modal-backdrop show"
            />
          </div>
        </div>
      }
    >
      <Portal
        containerInfo={
          <div
            style="position: relative; z-index: 1050;"
            tabindex="-1"
          >
            <div
              class=""
            >
              <div
                class="modal"
                role="dialog"
                style="display: block;"
                tabindex="-1"
              >
                <div
                  class="modal-dialog"
                  role="document"
                >
                  <div
                    class="modal-content"
                  >
                    <div
                      class="header modal-header"
                    >
                      <h5
                        class="modal-title"
                      >
                        With Title
                      </h5>
                    </div>
                    <div
                      class="container modal-body"
                    >
                      Body
                      <img
                        alt="loading..."
                        class="img"
                        src="loading.gif"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                class="modal-backdrop show"
              />
            </div>
          </div>
        }
      >
        <div
          className=""
        >
          <Fade
            appear={true}
            baseClass=""
            baseClassActive="show"
            className="modal"
            enter={true}
            exit={true}
            in={true}
            mountOnEnter={false}
            onClick={[Function]}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            role="dialog"
            style={
              Object {
                "display": "block",
              }
            }
            tabIndex="-1"
            tag="div"
            timeout={0}
            unmountOnExit={false}
          >
            <Transition
              appear={true}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={0}
              unmountOnExit={false}
            >
              <div
                className="modal"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                role="dialog"
                style={
                  Object {
                    "display": "block",
                  }
                }
                tabIndex="-1"
              >
                <div
                  className="modal-dialog"
                  role="document"
                >
                  <div
                    className="modal-content"
                  >
                    <ModalHeader
                      charCode={215}
                      className="header"
                      closeAriaLabel="Close"
                      tag="h5"
                      wrapTag="div"
                    >
                      <div
                        className="header modal-header"
                      >
                        <h5
                          className="modal-title"
                        >
                          With Title
                        </h5>
                      </div>
                    </ModalHeader>
                    <ModalBody
                      className="container"
                      tag="div"
                    >
                      <div
                        className="container modal-body"
                      >
                        Body
                        <img
                          alt="loading..."
                          className="img"
                          src="loading.gif"
                        />
                      </div>
                    </ModalBody>
                  </div>
                </div>
              </div>
            </Transition>
          </Fade>
          <div
            className="modal-backdrop show"
          />
        </div>
      </Portal>
    </Portal>
  </Modal>
</Loading>
`;

exports[`Storyshots Loading title and body, no icon 1`] = `
<Loading
  fade={false}
  noIcon={true}
  title="With Title"
>
  <Modal
    autoFocus={true}
    backdrop={true}
    backdropTransition={
      Object {
        "mountOnEnter": true,
        "timeout": 150,
      }
    }
    centered={false}
    fade={false}
    isOpen={true}
    keyboard={true}
    modalTransition={
      Object {
        "timeout": 300,
      }
    }
    onClosed={[Function]}
    onOpened={[Function]}
    role="dialog"
    zIndex={1050}
  >
    <Portal
      node={
        <div
          style="position: relative; z-index: 1050;"
          tabindex="-1"
        >
          <div
            class=""
          >
            <div
              class="modal"
              role="dialog"
              style="display: block;"
              tabindex="-1"
            >
              <div
                class="modal-dialog"
                role="document"
              >
                <div
                  class="modal-content"
                >
                  <div
                    class="header modal-header"
                  >
                    <h5
                      class="modal-title"
                    >
                      With Title
                    </h5>
                  </div>
                  <div
                    class="container modal-body"
                  >
                    Body
                  </div>
                </div>
              </div>
            </div>
            <div
              class="modal-backdrop show"
            />
          </div>
        </div>
      }
    >
      <Portal
        containerInfo={
          <div
            style="position: relative; z-index: 1050;"
            tabindex="-1"
          >
            <div
              class=""
            >
              <div
                class="modal"
                role="dialog"
                style="display: block;"
                tabindex="-1"
              >
                <div
                  class="modal-dialog"
                  role="document"
                >
                  <div
                    class="modal-content"
                  >
                    <div
                      class="header modal-header"
                    >
                      <h5
                        class="modal-title"
                      >
                        With Title
                      </h5>
                    </div>
                    <div
                      class="container modal-body"
                    >
                      Body
                    </div>
                  </div>
                </div>
              </div>
              <div
                class="modal-backdrop show"
              />
            </div>
          </div>
        }
      >
        <div
          className=""
        >
          <Fade
            appear={true}
            baseClass=""
            baseClassActive="show"
            className="modal"
            enter={true}
            exit={true}
            in={true}
            mountOnEnter={false}
            onClick={[Function]}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            role="dialog"
            style={
              Object {
                "display": "block",
              }
            }
            tabIndex="-1"
            tag="div"
            timeout={0}
            unmountOnExit={false}
          >
            <Transition
              appear={true}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={0}
              unmountOnExit={false}
            >
              <div
                className="modal"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                role="dialog"
                style={
                  Object {
                    "display": "block",
                  }
                }
                tabIndex="-1"
              >
                <div
                  className="modal-dialog"
                  role="document"
                >
                  <div
                    className="modal-content"
                  >
                    <ModalHeader
                      charCode={215}
                      className="header"
                      closeAriaLabel="Close"
                      tag="h5"
                      wrapTag="div"
                    >
                      <div
                        className="header modal-header"
                      >
                        <h5
                          className="modal-title"
                        >
                          With Title
                        </h5>
                      </div>
                    </ModalHeader>
                    <ModalBody
                      className="container"
                      tag="div"
                    >
                      <div
                        className="container modal-body"
                      >
                        Body
                      </div>
                    </ModalBody>
                  </div>
                </div>
              </div>
            </Transition>
          </Fade>
          <div
            className="modal-backdrop show"
          />
        </div>
      </Portal>
    </Portal>
  </Modal>
</Loading>
`;
