// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Form/DateField Passing a format for dates 1`] = `
<Form
  onSubmit={[Function]}
  schema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "three",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "three": DateSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "date",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
  values={
    Object {
      "three": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "three": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "three",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "three": DateSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {},
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "date",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": ObjectSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_defaultDefault": [Function],
                "_deps": Array [],
                "_excludedEdges": Array [],
                "_exclusive": Object {},
                "_mutate": false,
                "_nodes": Array [
                  "three",
                ],
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "object",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "fields": Object {
                  "three": DateSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_deps": Array [],
                    "_exclusive": Object {},
                    "_mutate": false,
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "date",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  },
                },
                "tests": Array [],
                "transforms": Array [
                  [Function],
                ],
              },
              "values": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <DateField
              dateFormat="yyyy/MM/dd"
              help="A little help from my friends"
              label="Field 3"
              name="three"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_8"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_8"
                    >
                      Field 3
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="yyyy/MM/dd"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_8"
                        monthsShown={1}
                        name="three"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_8"
                                name="three"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="2019/03/03"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_8"
                                      name="three"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="2019/03/03"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          A little help from my friends
                        </small>
                      </FormText>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="three"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": false,
                                "_nodes": Array [
                                  "three",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "three": DateSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {},
                                    "_mutate": false,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "date",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="three"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
            <SubmitButton>
              <Button
                color="secondary"
                disabled={true}
                tag="button"
                type="submit"
              >
                <button
                  aria-label={null}
                  className="btn btn-secondary disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="submit"
                >
                  Accept
                </button>
              </Button>
            </SubmitButton>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField label and name 1`] = `
<Form
  values={
    Object {
      "two": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "two": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "two": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "two": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <DateField
              label="field two"
              name="two"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_1"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_1"
                    >
                      field two
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_1"
                        monthsShown={1}
                        name="two"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_1"
                                name="two"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_1"
                                      name="two"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="two"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "two": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": undefined,
                              "values": Object {
                                "two": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="two"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField label, name and help 1`] = `
<Form
  values={
    Object {
      "three": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "three": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <DateField
              help="A little help from my friends"
              label="Field 3"
              name="three"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_2"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_2"
                    >
                      Field 3
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_2"
                        monthsShown={1}
                        name="three"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_2"
                                name="three"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_2"
                                      name="three"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          A little help from my friends
                        </small>
                      </FormText>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="three"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": undefined,
                              "values": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="three"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField label, name, help plus error 1`] = `
<Form
  values={
    Object {
      "three": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "three": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {
                "three": "some error message",
              },
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {
                "three": true,
              },
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <TouchField
              name="three"
            />
            <SetFieldError
              message="some error message"
              name="three"
            />
            <DateField
              help="A little help from my friends"
              label="Field 3"
              name="three"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_5"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_5"
                    >
                      Field 3
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control is-invalid"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_5"
                        monthsShown={1}
                        name="three"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control is-invalid"
                                disabled={false}
                                id="F_DF_5"
                                name="three"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control is-invalid"
                                      disabled={false}
                                      id="F_DF_5"
                                      name="three"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          A little help from my friends
                        </small>
                      </FormText>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="three"
                        style={
                          Object {
                            "display": "block",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {
                                "three": "some error message",
                              },
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {
                                "three": true,
                              },
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": undefined,
                              "values": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="three"
                          style={
                            Object {
                              "display": "block",
                            }
                          }
                        >
                          <FormFeedback
                            style={
                              Object {
                                "display": "block",
                              }
                            }
                            tag="div"
                          >
                            <div
                              className="invalid-feedback"
                              style={
                                Object {
                                  "display": "block",
                                }
                              }
                            >
                              some error message
                            </div>
                          </FormFeedback>
                        </ErrorMessageImpl>
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField label, name, help plus touched 1`] = `
<Form
  values={
    Object {
      "three": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "three": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {
                "three": true,
              },
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <TouchField
              name="three"
            />
            <DateField
              help="A little help from my friends"
              label="Field 3"
              name="three"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_3"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_3"
                    >
                      Field 3
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_3"
                        monthsShown={1}
                        name="three"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_3"
                                name="three"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_3"
                                      name="three"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          A little help from my friends
                        </small>
                      </FormText>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="three"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {
                                "three": true,
                              },
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": undefined,
                              "values": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="three"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField name, no label 1`] = `
<Form
  values={
    Object {
      "one": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "one": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "one": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": undefined,
              "values": Object {
                "one": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <DateField
              name="one"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_0"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_0"
                    />
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_0"
                        monthsShown={1}
                        name="one"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_0"
                                name="one"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_0"
                                      name="one"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="one"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "one": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": undefined,
                              "values": Object {
                                "one": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="one"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;

exports[`Storyshots Form/DateField validate via schema 1`] = `
<Form
  onSubmit={[Function]}
  schema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "three",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "three": DateSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "date",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
  values={
    Object {
      "three": 2019-03-02T23:00:00.000Z,
    }
  }
>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "three": 2019-03-02T23:00:00.000Z,
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "three",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "three": DateSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {},
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "date",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      tag={[Function]}
    >
      <Form
        className=""
      >
        <Component
          className=""
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialValues": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setError": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validate": undefined,
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validationSchema": ObjectSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_defaultDefault": [Function],
                "_deps": Array [],
                "_excludedEdges": Array [],
                "_exclusive": Object {},
                "_mutate": false,
                "_nodes": Array [
                  "three",
                ],
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "object",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "fields": Object {
                  "three": DateSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_deps": Array [],
                    "_exclusive": Object {},
                    "_mutate": false,
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "date",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  },
                },
                "tests": Array [],
                "transforms": Array [
                  [Function],
                ],
              },
              "values": Object {
                "three": 2019-03-02T23:00:00.000Z,
              },
            }
          }
        >
          <form
            className=""
            onReset={[Function]}
            onSubmit={[Function]}
          >
            <DateField
              help="A little help from my friends"
              label="Field 3"
              name="three"
            >
              <FormGroup
                row={true}
                tag="div"
              >
                <div
                  className="position-relative row form-group"
                >
                  <Label
                    for="F_DF_7"
                    lg={2}
                    tag="label"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <label
                      className="col-12 col-lg-2 col-form-label"
                      htmlFor="F_DF_7"
                    >
                      Field 3
                    </label>
                  </Label>
                  <Col
                    lg={8}
                    tag="div"
                    widths={
                      Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ]
                    }
                    xs={12}
                  >
                    <div
                      className="col-12 col-lg-8"
                    >
                      <DatePicker
                        allowSameDay={false}
                        className="form-control"
                        dateFormat="MM/dd/yyyy"
                        dateFormatCalendar="LLLL yyyy"
                        disabled={false}
                        disabledKeyboardNavigation={false}
                        dropdownMode="scroll"
                        id="F_DF_7"
                        monthsShown={1}
                        name="three"
                        nextMonthButtonLabel="Next month"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClickOutside={[Function]}
                        onFocus={[Function]}
                        onInputClick={[Function]}
                        onInputError={[Function]}
                        onKeyDown={[Function]}
                        onMonthChange={[Function]}
                        onSelect={[Function]}
                        onYearChange={[Function]}
                        preventOpenOnFocus={false}
                        previousMonthButtonLabel="Previous Month"
                        readOnly={false}
                        renderDayContents={[Function]}
                        selected={2019-03-02T23:00:00.000Z}
                        shouldCloseOnSelect={true}
                        showTimeSelect={false}
                        timeCaption="Time"
                        timeIntervals={30}
                        withPortal={false}
                      >
                        <PopperComponent
                          hidePopper={true}
                          popperComponent={null}
                          popperModifiers={
                            Object {
                              "preventOverflow": Object {
                                "boundariesElement": "viewport",
                                "enabled": true,
                                "escapeWithReference": true,
                              },
                            }
                          }
                          popperPlacement="bottom-start"
                          popperProps={Object {}}
                          targetComponent={
                            <div
                              className="react-datepicker__input-container"
                            >
                              <input
                                className="form-control"
                                disabled={false}
                                id="F_DF_7"
                                name="three"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                readOnly={false}
                                type="text"
                                value="03/03/2019"
                              />
                            </div>
                          }
                        >
                          <Manager>
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <div
                                  className="react-datepicker-wrapper"
                                >
                                  <div
                                    className="react-datepicker__input-container"
                                  >
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      id="F_DF_7"
                                      name="three"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="03/03/2019"
                                    />
                                  </div>
                                </div>
                              </InnerReference>
                            </Reference>
                          </Manager>
                        </PopperComponent>
                      </DatePicker>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          A little help from my friends
                        </small>
                      </FormText>
                      <FormikConnect(ErrorMessageImpl)
                        component={[Function]}
                        name="three"
                        style={
                          Object {
                            "display": "none",
                          }
                        }
                      >
                        <ErrorMessageImpl
                          component={[Function]}
                          formik={
                            Object {
                              "dirty": false,
                              "errors": Object {},
                              "handleBlur": [Function],
                              "handleChange": [Function],
                              "handleReset": [Function],
                              "handleSubmit": [Function],
                              "initialValues": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                              "isSubmitting": false,
                              "isValid": false,
                              "isValidating": false,
                              "registerField": [Function],
                              "resetForm": [Function],
                              "setError": [Function],
                              "setErrors": [Function],
                              "setFieldError": [Function],
                              "setFieldTouched": [Function],
                              "setFieldValue": [Function],
                              "setFormikState": [Function],
                              "setStatus": [Function],
                              "setSubmitting": [Function],
                              "setTouched": [Function],
                              "setValues": [Function],
                              "submitCount": 0,
                              "submitForm": [Function],
                              "touched": Object {},
                              "unregisterField": [Function],
                              "validate": undefined,
                              "validateField": [Function],
                              "validateForm": [Function],
                              "validateOnBlur": true,
                              "validateOnChange": true,
                              "validationSchema": ObjectSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_defaultDefault": [Function],
                                "_deps": Array [],
                                "_excludedEdges": Array [],
                                "_exclusive": Object {},
                                "_mutate": false,
                                "_nodes": Array [
                                  "three",
                                ],
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "object",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "fields": Object {
                                  "three": DateSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_deps": Array [],
                                    "_exclusive": Object {},
                                    "_mutate": false,
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "date",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "tests": Array [],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  },
                                },
                                "tests": Array [],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "values": Object {
                                "three": 2019-03-02T23:00:00.000Z,
                              },
                            }
                          }
                          name="three"
                          style={
                            Object {
                              "display": "none",
                            }
                          }
                        />
                      </FormikConnect(ErrorMessageImpl)>
                    </div>
                  </Col>
                </div>
              </FormGroup>
            </DateField>
            <SubmitButton>
              <Button
                color="secondary"
                disabled={true}
                tag="button"
                type="submit"
              >
                <button
                  aria-label={null}
                  className="btn btn-secondary disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="submit"
                >
                  Accept
                </button>
              </Button>
            </SubmitButton>
          </form>
        </Component>
      </Form>
    </Form>
  </Formik>
</Form>
`;
